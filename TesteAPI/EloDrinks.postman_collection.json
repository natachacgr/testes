{
	"info": {
		"_postman_id": "8fa8d0f9-95dc-44c3-934f-6118c511a27e",
		"name": "EloDrinks",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33439342"
	},
	"item": [
		{
			"name": "Item",
			"item": [
				{
					"name": "LoginADM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();\r",
									"pm.environment.set(\"cookies\",response.access_token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "adm@adm",
									"type": "text"
								},
								{
									"key": "password",
									"value": "123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseURL}}/auth/token",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Response time is less than 4s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"randomNome\", _.random(0,9999999));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cookies}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "Nome",
									"value": "{{randomNome}}",
									"type": "text"
								},
								{
									"key": "Descricao",
									"value": "Refrigerante classico",
									"type": "text"
								},
								{
									"key": "Categoria",
									"value": "nao_alcoolicos",
									"type": "text"
								},
								{
									"key": "Preco",
									"value": "6",
									"type": "text"
								},
								{
									"key": "Ativo",
									"value": "1",
									"type": "text"
								},
								{
									"key": "image",
									"type": "file",
									"src": "./coca.jpeg"
								}
							]
						},
						"url": {
							"raw": "{{BaseURL}}/item/create/",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"item",
								"create",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Cosmopolitan\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Mojito\");\r",
									"});\r",
									"\r",
									"const Nome = pm.environment.get(\"randomNome\");\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(Nome);\r",
									"});\r",
									"\r",
									"data = pm.response.json();\r",
									"let id = null;\r",
									"\r",
									"for (let entry of data.Itens) {\r",
									"    if (entry.item.Nome === String(Nome)) {\r",
									"        id = entry.item.ID;\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.environment.set(\"idRandom\", id);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cookies}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/item/all",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"item",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateFalse",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 4s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"False\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cookies}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BaseURL}}/item/toogle/Status?item_id={{idRandom}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"item",
								"toogle",
								"Status"
							],
							"query": [
								{
									"key": "item_id",
									"value": "{{idRandom}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "updateAtivo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 4s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"True\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cookies}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BaseURL}}/item/toogle/Status?item_id={{idRandom}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"item",
								"toogle",
								"Status"
							],
							"query": [
								{
									"key": "item_id",
									"value": "{{idRandom}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getImageItem",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cookies}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/item/getImage/{{idRandom}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"item",
								"getImage",
								"{{idRandom}}"
							],
							"query": [
								{
									"key": "item",
									"value": "{{id_coca_cola}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getItem",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cookies}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/itemtoogle/{{idRandom}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"itemtoogle",
								"{{idRandom}}"
							],
							"query": [
								{
									"key": "item",
									"value": "{{id_coca_cola}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "updateFalse (Desativa para nao aparecer em itens)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 4s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"False\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cookies}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BaseURL}}/item/toogle/Status?item_id={{idRandom}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"item",
								"toogle",
								"Status"
							],
							"query": [
								{
									"key": "item_id",
									"value": "{{idRandom}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "usergetme",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"adm@adm\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cookies}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/get/me",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"get",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "usersProtected-route",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"adm@adm\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cookies}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/protected-route",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"protected-route"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"randomNome\", _.random(0,9999999));\r",
									"const randomNome = pm.environment.get(\"randomNome\");\r",
									"let randomEmail = randomNome + \"@email.com\";\r",
									"pm.environment.set(\"randomEmail\", randomEmail);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cookies}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userName\": \"{{randomNome}}\",\r\n  \"Email\": \"{{randomEmail}}\",\r\n  \"password\": \"123\",\r\n  \"NumCel\": \"{{randomNome}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/create/",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"create",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "LoginUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();\r",
									"pm.environment.set(\"cookies\",response.access_token);\r",
									"pm.environment.set(\"randomUserID\", response.user.ID);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{randomEmail}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BaseURL}}/auth/token",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "usersAll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const randomEmail = pm.environment.get(\"randomEmail\");\r",
									"\r",
									"// Parse da resposta\r",
									"data = pm.response.json();\r",
									"let id = null;\r",
									"\r",
									"for (let entry of data) {\r",
									"    if (entry.Email === randomEmail) {\r",
									"        id = entry.ID;\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.environment.set(\"idRandom\", id);\r",
									"\r",
									"pm.test(\"Body contains the random email\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(randomEmail);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cookies}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/all",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "getUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const randomEmail = pm.environment.get(\"randomEmail\");\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(randomEmail);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cookies}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/{{idRandom}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"{{idRandom}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cookies}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ID\": {{idRandom}},\r\n  \"userName\": \"teste\",\r\n  \"NumCel\": \"111111111\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/update/",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"update",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "getUserValidacaoUpdate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const randomEmail = pm.environment.get(\"randomEmail\");\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(randomEmail);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"111111111\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"teste\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cookies}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/{{idRandom}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"{{idRandom}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateUserRole(ADM)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cookies}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ID\": {{idRandom}},\r\n  \"userName\": \"teste1\",\r\n  \"NumCel\": \"111111112\",\r\n  \"role\": \"Administrador\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/update/Adm/Role",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"update",
								"Adm",
								"Role"
							]
						}
					},
					"response": []
				},
				{
					"name": "getUserValidacaoRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const randomEmail = pm.environment.get(\"randomEmail\");\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(randomEmail);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"111111112\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"teste1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Administrador\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cookies}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/{{idRandom}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"{{idRandom}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateUserRole(Cliente)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cookies}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ID\": {{idRandom}},\r\n  \"userName\": \"teste2\",\r\n  \"NumCel\": \"111111113\",\r\n  \"role\": \"Cliente\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/update/Adm/Role",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"update",
								"Adm",
								"Role"
							]
						}
					},
					"response": []
				},
				{
					"name": "getUserValidacaoRoleCliente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const randomEmail = pm.environment.get(\"randomEmail\");\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(randomEmail);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"111111113\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"teste2\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Cliente\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cookies}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/{{idRandom}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"{{idRandom}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "userToogleFalse",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"False\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cookies}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/toogle/Status?user_id={{idRandom}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"toogle",
								"Status"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{idRandom}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "userToogleAtivo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"True\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cookies}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/toogle/Status?user_id={{idRandom}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"toogle",
								"Status"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{idRandom}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Pedido",
			"item": [
				{
					"name": "pedidosAll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"[]\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cookies}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/pedido/all",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"pedido",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "createPedido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"PrecoPedido\", pm.response.json().Preço);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"randomNome\", _.random(0,9999));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cookies}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"pedido\": {\r\n    \"ID_Comprador\": {{idRandom}},\r\n    \"Num_Convidado\": 100,\r\n    \"Nome_Evento\": \"teste\",\r\n    \"Horario_Inicio\": \"18:00\",\r\n    \"Horario_Fim\": \"20:00\",\r\n    \"Data_Evento\": \"2025-07-12\",\r\n    \"Data_Compra\": \"2025-05-21\",\r\n    \"Status\": \"Pendente\"\r\n  },\r\n  \"itens\": [\r\n    {\r\n      \"ID\": 1,\r\n      \"quantidade\": {{randomNome}}\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/pedido/create/",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"pedido",
								"create",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "pedidosAllValidacao",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const preco = pm.environment.get(\"PrecoPedido\");\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(preco);\r",
									"});\r",
									"\r",
									"data = pm.response.json();\r",
									"let id = null;\r",
									"console.log(preco)\r",
									"\r",
									"for (let entry of data){\r",
									"    console.log(entry.Preço)\r",
									"    if (entry.Preço == preco){\r",
									"        id = entry.ID\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.environment.set(\"idRandomPedido\", id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(() => {}, 1000); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cookies}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/pedido/all",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"pedido",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "updatePedido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"PrecoPedido\", pm.response.json().Preço);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cookies}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/pedido/set/status?Status=Pagamento&id={{idRandomPedido}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"pedido",
								"set",
								"status"
							],
							"query": [
								{
									"key": "Status",
									"value": "Pagamento"
								},
								{
									"key": "id",
									"value": "{{idRandomPedido}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "pedidosAllValidacaoUpdate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const ID = pm.environment.get(\"idRandomPedido\");\r",
									"\r",
									"data = pm.response.json();\r",
									"let Status = \"\";\r",
									"\r",
									"for (let entry of data){\r",
									"    if (entry.ID == ID){\r",
									"        Status = entry.Status;\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.test(\"Status of the order is Pagamento\", function () {\r",
									"    pm.expect(Status).to.eql(\"Pagamento\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cookies}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/pedido/all",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"pedido",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "packagesAll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"PrecoPedido\", pm.response.json().Preço);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cookies}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/pedido/packages/all?id=1",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"pedido",
								"packages",
								"all"
							],
							"query": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "createPackage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cookies}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id_pacote\": 1,\r\n  \"Nome_Evento\": \"Teste123\",\r\n  \"Horario_Inicio\": \"15:00\",\r\n  \"Horario_Fim\": \"23:00\",\r\n  \"Data_Evento\": \"2025-07-12\",\r\n  \"Status\": \"Orcado\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/pedido/create/packages/",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"pedido",
								"create",
								"packages",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "packageValidacao",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"9500\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Orcado\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cookies}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/pedido/all",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"pedido",
								"all"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Payment",
			"item": [
				{
					"name": "getPayment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"payment_url\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{cookies}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id",
									"value": "3",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{BaseURL}}/payment/getPayment?id={{idRandomPedido}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"payment",
								"getPayment"
							],
							"query": [
								{
									"key": "id",
									"value": "{{idRandomPedido}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}